// http://ionicframework.com/docs/theming/
// App Global Sass
// --------------------------------------------------
// Put style rules here that you want to apply globally. These
// styles are for the entire app and not just one component.
// Additionally, this file can be also used as an entry point
// to import other Sass files to be included in the output CSS.
//
// Shared Sass variables, which can be used to adjust Ionic's
// default Sass variables, belong in "theme/variables.scss".
//
// To declare rules for a specific mode, create a child rule
// for the .md, .ios, or .wp mode classes. The mode class is
// automatically applied to the <body> element in the app.
@font-face {
    font-family: 'Baomoi_Light';
    src: url('../assets/fonts/baomoi-light-2.0.2.woff2') format('woff2');
    font-weight: normal;
    font-style: normal;
}

@font-face {
    font-family: 'Baomoi_Italic';
    src: url('../assets/fonts/baomoi-light-italic-2.0.2.woff2') format('woff2');
    font-weight: normal;
    font-style: normal;
}

@font-face {
    font-family: 'Baomoi_Regular';
    src: url('../assets/fonts/baomoi-regular-2.0.2.woff2') format('woff2');
    font-weight: normal;
    font-style: normal;
}

* {
    font-family: 'Baomoi_Light';
}

// Media of at most the maximum breakpoint width. No query for the largest breakpoint.
// Makes the @content apply to the given breakpoint and narrower.
@mixin media-breakpoint-down($name,
$breakpoints: $grid-breakpoints) {
    $max: breakpoint-max($name, $breakpoints);
    @if $max {
        @media (max-width: $max) {
            @content;
        }
    }
    @else {
        @content;
    }
} // Name of the next breakpoint, or null for the last breakpoint.
//
//    >> breakpoint-next(sm)
//    md
//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    md
//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))
//    md
@function breakpoint-next($name,
$breakpoints: $grid-breakpoints,
$breakpoint-names: map-keys($breakpoints)) {
    $n: index($breakpoint-names, $name);
    @return if($n < length($breakpoint-names),
    nth($breakpoint-names,
    $n+1),
    null);
} // Maximum breakpoint width. Null for the largest (last) breakpoint.
// The maximum value is calculated as the minimum of the next one less 0.1.
//
//    >> breakpoint-max(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    767px
@function breakpoint-max($name,
$breakpoints: $grid-breakpoints) {
    $next: breakpoint-next($name, $breakpoints);
    @return if($next,
    breakpoint-min($next,
    $breakpoints) - 1px,
    null);
} // Creates text alignment classes based on screen size
// TODO this would be nice to add to the framework
@each $breakpoint in map-keys($grid-breakpoints) {
    $infix: breakpoint-infix($breakpoint, $grid-breakpoints);
    @include media-breakpoint-up($breakpoint,
    $grid-breakpoints) {
        // Provide text `[text-{bp}]` attributes for aligning text based on screen size
        [text#{$infix}-center] {
            text-align: center;
        }
        [text#{$infix}-left] {
            text-align: left;
        }
        [text#{$infix}-right] {
            text-align: right;
        }
        [hidden#{$infix}-up] {
            display: none;
        }
    }
    @include media-breakpoint-down($breakpoint,
    $grid-breakpoints) {
        [hidden#{$infix}-down] {
            display: none;
        }
    }
}

// styles:
.bgFacebook {
    background-color: color($colors, facebook) !important;
}

.bgGoogle {
    background-color: color($colors, google) !important;
}

.bgPrimary {
    background-color: color($colors, primary) !important;
}

span.paragraph-end {    
    background: linear-gradient(to right, rgba(245, 245, 245, 0), rgba(245, 245, 245, 1));top: 0;
    height: 25px;
    max-height: 100%;
    position: absolute;
    right: 0;
    width: 60px;
}

.my-ion-list {
    ion-item {
        padding: 0;
        .item-inner {
            padding: 0 !important;
            h1,
            h2,
            h3,
            h4,
            h5 {
                margin: 0 !important;
                color: color($colors, text);
            }
            p {
                white-space: normal;
                text-align: justify;
            }
            button,
            ion-button {
                margin: 0;
                padding: 0;
            }
        }
    }
    ion-list-header,
    .list-header-md,
    .list-header-ios {
        padding: 0 !important;
    }
}

h1,
h2,
h3,
h4,
h5 {
    margin: 0px;
}

h2 {
    font-size: 2.5rem !important;
}

h3 {
    font-size: 1.6rem !important;
}

.oldPrice,
.newPrice {
    color: color($colors, primary) !important;
    font-family: 'Baomoi_Regular';
    font-size: 1.6rem;
}

.oldPrice {
    color: color($colors, google) !important;
    text-decoration: line-through;
}

.myBtn {
    background-color: color($colors, primary);
    &:active {
        background-color: darken(color($colors, primary), 15%) !important;
    }
}

.tab-button:hover:not(.disable-hover),
.tab-button[aria-selected=true],
.tab-button[aria-selected=true] .tab-button-icon,
.tab-button[aria-selected=true] .tab-button-text {
    color: lighten(color($colors, primary), 45%) !important;
}

.tab-button:hover:not(.disable-hover),
.tab-button,
.tab-button .tab-button-icon {
    color: darken(color($colors, primary), 25%) !important;
}

.tabs-md .tabbar,
.tabs-ios .tabbar {
    background-color: color($colors, primary) !important;
    z-index: 999;
}

ion-toast.toast-info .toast-wrapper,
ion-toast.toast-primary .toast-wrapper {
    background-color: darken(color($colors, primary), 25%) !important;
}

ion-toast.toast-danger .toast-wrapper {
    background-color: color($colors, google) !important;
}

@keyframes card-animation {
    from {
        opacity: 0;
    }
    to {
        opacity: 1;
    }
}

.loading-md .loading-wrapper,
.loading-ios .loading-wrapper {
    background: transparent;
    color: $primary-light;
    box-shadow: none;
    border-radius: 0;
    border: 0px;
}

// custom loading
@keyframes rotating {
    from {
        transform: rotate(0deg);
    }
    to {
        transform: rotate(360deg);
    }
}

@keyframes shaking {
    0% {
        transform: rotate(-60deg);
        left: calc(50% - 60px);
    }
    100% {
        transform: rotate(60deg);
        left: calc(50% - 20px);
    }
}

.rotating {
    animation: rotating 2s linear infinite;
}

.shaking {
    animation: shaking 2s ease-in-out alternate infinite;
}

.my-custom-spinner {
    height: 80px;
    width: 80px;
    display: block;
    background: transparent url('../assets/bananas.svg') no-repeat center center;
    top: calc(50% - 40px);
    left: calc(50% - 40px);
}

.my-custom-loading {
    position: relative;
    .my-custom-spinner {
        position: absolute;
        width: 80px;
        height: 80px;
        top: -80px;
        left: calc(50% - 40px);
    }
    .message {
        padding-top: 10px;
        color: #FFF;
    }
}

.paragraph-end {
    background: linear-gradient(to right, rgba(255, 255, 255, 0), rgba(255, 255, 255, 1));
    bottom: 0 !important;
    height: 25px;
    max-height: 100%;
    position: absolute;
    right: 0;
}

// z-indexes--------->
.splash {
    position: absolute;
    width: 100%;
    height: 100%;
    z-index: 999;
    display: flex;
    align-items: center;
    justify-content: center;
    background: color($colors, primary);
}

.content {
    // your animation code (SpinKit used in this demo)
    background-color: #f5f5f5 !important;
}
.item {
    background-color: transparent;
}